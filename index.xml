<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>record and share</title>
    <link>https://justabandon.github.io/</link>
    <description>Recent content on record and share</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Apr 2022 18:12:03 +0800</lastBuildDate><atom:link href="https://justabandon.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PE文件初探_中</title>
      <link>https://justabandon.github.io/posts/pe%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2_%E4%B8%AD/</link>
      <pubDate>Mon, 25 Apr 2022 18:12:03 +0800</pubDate>
      
      <guid>https://justabandon.github.io/posts/pe%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2_%E4%B8%AD/</guid>
      <description>稍微详细一点的PE结构    PE文件结构图:
1. DOS MZ Header————IMAGE_DOS_HEADER	DOS MZ 头 2. DOS stub———————MS-DOS Stub Program	DOS 根 3. PE Header——————IMAGE_NT_HEADERS	PE头(NT 头) 4. Section table—————MAGE_SECTION_HEADER 区段头 5.1 Section 1	(.text)	SECTION.text	区段 .text 5-2 Section 2	(.data)	SECTION.data	区段 .data .text：包含程序的可执行代码。 .data:包含初始化数据。 .bss：包含未初始化的数据。 .rdata:包含只读的初始化数据。 .edata：包含导出表。 .idata：包含导入表。 .reloc：包含图像重定位信息。 .rsrc：包含程序使用的资源，包括图像、图标甚至嵌入的二进制文件。 .tls: ( T thread Local S torage )，为程序的每个执行线程提供存储。 PEview视图:
 1.DOS MZ Heade    DOS头结构
DOS_MZ_HEADER:
此结构中 重点参数为e_magic 和 e_lfanew, e_magic 占用两个字节 4D 5A ,转换成字符为MZ,位置在于文件的最开始,可执行文件中不可缺少的一部分.</description>
    </item>
    
    <item>
      <title>PE文件初探_上</title>
      <link>https://justabandon.github.io/posts/pe%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2_%E4%B8%8A/</link>
      <pubDate>Wed, 20 Apr 2022 18:50:34 +0800</pubDate>
      
      <guid>https://justabandon.github.io/posts/pe%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2_%E4%B8%8A/</guid>
      <description>#PE文件初探
 前言: 最近在研究免杀方面的知识和碰到一个有趣的工具 PE文件转shellcode 并对此进行探索而记录此文章
 1.什么是PE文件    PE文件是Windows操作系统下使用的一种可执行文件，由COFF（UNIX平台下的通用对象文件格式）格式文件发展而来。32位称为PE32，64位称为PE+或PE32+。
可移植可执行文件( PE ) 格式是用于32 位和 64 位版本的Windows操作系统的可执行文件、目标代码、DLL和其他文件格式。PE 格式是一种数据结构，它封装了 Windows 操作系统加载程序管理打包的可执行代码所需的信息。这包括链接、API导出和导入表、资源管理数据和线程本地存储(TLS) 数据的动态库引用。在NT操作系统上，PE 格式用于EXE 、DLL、SYS（设备驱动程序）、MUI等文件类型。统一可扩展固件接口 (UEFI)规范指出 PE 是 EFI 环境中的标准可执行格式
PE是一种数据格式,拥有这种数据格式的文件称作PE文件
2.PE文件格式    常见PE文件后缀:
 可执行文件 EXE,SCR
  库系列 DLL, OCX, CPL, DRV
  驱动程序系列 SYS, VXD
  对象文件系列 OBJ
  基本结构分为头与体,以下为PE文件基本结构简单描述,详细信息有机会再加
头:
 DOS Header （DOS头)
  DOS stub (DOS根)
  NT Header (NT 头)</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://justabandon.github.io/about/</link>
      <pubDate>Wed, 20 Apr 2022 16:33:08 +0800</pubDate>
      
      <guid>https://justabandon.github.io/about/</guid>
      <description>about me
关于我</description>
    </item>
    
  </channel>
</rss>
